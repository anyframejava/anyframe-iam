<chapter id="anyframeiaminstall_admin">
	<title>Anyframe IAM Admin Install</title>

	<para>This chapter shows how to install Anyframe IAM Admin that is a web application using IAM Core to manage DB easily.</para>

	<!-- para>이번 장에서는 IAM Core가 사용하는 DB 설정을 관리자가 손쉽게 조작 할 수 있도록 하는 Anyframe IAM Admin 설치 절차에 대해서 알아본다.</para-->

	<para>Followings are installation steps for IAM Admin.</para>

	<!-- para>IAM Admin의 설치 절차는 다음과 같다.</para-->
	<itemizedlist>
		
		<listitem><para>Deploying anyframe-iam-admin-web-1.1.3.war in WAS</para></listitem>
		
		<!-- listitem><para>WAS에 anyframe-iam-admin-web-1.1.3.war 배포</para></listitem-->
		
		<listitem><para>configuration of remote-invoker-servlet.xml</para></listitem>
		
		<!-- listitem><para>remote-invoker-servlet.xml 파일 설정</para></listitem-->
		
	</itemizedlist>
	
	<section id="anyframeiaminstall_adminwardeploy">
		<title>Deploying war file</title>		
		<!-- title>war 파일 배포</title-->
				
		<para>
			Deploy anyframe-iam-admin-web-1.1.3.war file that exist in Anyframe-iam-1.1.3-bin.zip with zipped in WAS.
		</para>

		<!-- para>다운로드 받은 Anyframe-iam-1.1.3-bin.zip 파일의 압축을 해제 하면 나오는 anyframe-iam-admin-web-1.1.3.war 파일을 WAS에 배포한다.</para-->

		<para>
			Explanation for each WAS is skipped because it's beyond domain of this documents. 
		</para>

		<!-- para>WAS 별 배포 방법에 대한 설명은 본 문서 범위를 넘어가므로 생략하였다.</para-->
	</section>
	
	<section id="anyframeiaminstall_admincustomerconfiguration">
		<title>Configuration</title>
		
		<para>
			After deploying war file, open /WEB-INF/springmvc/remote-invoker-servlet.xml file.
			Assign serverUrl Property of gatherServiceClient, resourceReloadServiceClient Bean as url of target system.
		</para>
		
		<!-- para>
			war 파일 배포 후 /WEB-INF/springmvc/remote-invoker-servlet.xml 파일을 열어서 gatherServiceClient, 
			resourceReloadServiceClient Bean의 serverUrl Property 설정 값을 대상 시스템의 url로 설정한다.
		</para-->

		<para>
			In serviceUrl property, bold font should be modified.
		</para>

		<!-- para>serviceUrl property에서 굵은 글씨로 표시된 부분이 수정해야할 대상이다.</para-->

		<programlisting language="xml">
<![CDATA[<bean id="gatherServiceClient"
    class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">				
    <property name="serviceUrl"
        value="]]>
        <emphasis role="bold">http://localhost:8080/anyframe-iam-sample</emphasis><![CDATA[/assist/resourceGatherAssist.do" />
    <property name="serviceInterface"
        value="anyframe.iam.core.assist.IResourceGatherAssistService" />
    <property name="httpInvokerRequestExecutor">		
        <bean class="org.springframework.security.context.httpinvoker.AuthenticationSimpleHttpInvokerRequestExecutor" />
    </property>
</bean>

<bean id="resourceReloadServiceClient"
    class="org.springframework.remoting.httpinvoker.HttpInvokerProxyFactoryBean">
    <property name="serviceUrl"
        value="]]>
        <emphasis role="bold">http://localhost:8080/anyframe-iam-sample</emphasis><![CDATA[/reload/resourceReload.do" />
    <property name="serviceInterface"
        value="anyframe.iam.core.reload.IResourceReloadService" />
    <property name="httpInvokerRequestExecutor">
        <bean class="org.springframework.security.context.httpinvoker.AuthenticationSimpleHttpInvokerRequestExecutor" />
    </property>
</bean>]]></programlisting>
	</section>
	
	<warning>
		
		<title>Matters to be attended to deploy at WebLogic</title>
		
		<!-- title>WebLogic  배포시 유의 사항</title-->
		
		<para>
			When deploying Anyframe IAM at Weblogic, ClassNotFoundException is occured at 
			org.hibernate.hql.ast.HqlToken Class related with Hibernate.
		</para>
		
		<!-- para>
			Anyframe IAM 의 WAS별 배포시 WebLogic 10 에서는 Hibernate 와 연관하여 
			org.hibernate.hql.ast.HqlToken 클래스의 ClassNotFoundException 이 발생한다.
		</para-->

		<para>
			This problem is formally published as following link.
		</para>

		<!-- para>공식적으로 Hibernate 와 WebLogic 간의 antlr 라이브러리의 충돌 문제는 다음 링크과 같이 발표되어 있다.</para-->

		<para><ulink url="https://www.hibernate.org/250.html">https://www.hibernate.org/250.html</ulink></para>

		<para>
			User can avoid the problem with following three ways.
			Anyframe IAM uses 3rd thing and followings are common steps to apply Hibernate to Weblogic 10.
		</para>
		
		<!-- para>
			웹로직에서는 다음과 같이 세가지 방법으로 해당 문제점을 회피할 수 있다. 
			Anyframe IAM에서는 이 중 세번째 방법을 사용하고 있으며, 아래 내용은 Hibernate를 
			WebLogic 에 적용하는 경우 공통적인 조치사항이기도 하다.
		</para-->

		<para>1st way : In case WAR</para>

		<!-- para>첫번째 방법 : WAR 의 경우</para-->

		<para>Set WEB-INF/classes/weblogic.xml file as following</para>

		<!-- para>WEB-INF/classes/weblogic.xml 을 다음과 같이 설정한다.</para-->

		<programlisting language="xml">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<wls:weblogic-web-app xmlns:wls="http://www.bea.com/ns/weblogic/90"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
        http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd 
        http://www.bea.com/ns/weblogic/90 
        http://www.bea.com/ns/weblogic/90/weblogic-web-app.xsd">
    <wls:weblogic-version>10.0</wls:weblogic-version>
    <wls:jsp-descriptor>
        <wls:page-check-seconds>3</wls:page-check-seconds>
        <wls:precompile>false</wls:precompile>
    </wls:jsp-descriptor>
    <wls:container-descriptor>
        <wls:servlet-reload-check-secs>3</wls:servlet-reload-check-secs>
        <wls:resource-reload-check-secs>-1</wls:resource-reload-check-secs>
        <wls:prefer-web-inf-classes>true</wls:prefer-web-inf-classes>
    </wls:container-descriptor>
    <wls:context-root>anyframe-iam-admin-web</wls:context-root>
    <wls:charset-params>
        <wls:input-charset>
            <wls:resource-path>/*</wls:resource-path>
            <wls:java-charset-name>utf-8</wls:java-charset-name>
        </wls:input-charset>
    </wls:charset-params>
</wls:weblogic-web-app>]]></programlisting>
		
		<para>2nd way : In case EAR</para>
		
		<!-- para>두번째 방법 : EAR 의 경우</para-->
		
		<para>
			Set META-INF/weblogic-application.xml in EAR package as following.
		</para>
		
		<!-- para>EAR 패키지의 META-INF/weblogic-application.xml 을 다음과 같이 설정한다.</para-->
		<programlisting language="xml">
<![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<wls:weblogic-application xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:wls="http://www.bea.com/ns/weblogic/90"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee
        http://java.sun.com/xml/ns/j2ee/j2ee_1_4.xsd
        http://www.bea.com/ns/weblogic/90
        http://www.bea.com/ns/weblogic/90/weblogic-application.xsd">
    <wls:prefer-application-packages>
        <wls:package-name>antlr.*</wls:package-name>
    </wls:prefer-application-packages>
</wls:weblogic-application>]]></programlisting>

		<para>
			3rd way : Add antlr to Classpath.
		</para>

		<!-- para>세번째 방법 : 클래스패스에 antlr 을 추가</para-->
		
		<para>
			Copy antlr-2.7.6.jar file into %WL_HOME%\common\lib folder. Then, add
		</para>
		
		<!-- para>%WL_HOME%\common\lib 디렉토리에 antlr-2.7.6.jar 을 복사한 후setDomainEnv.cmd 파일(또는 .sh 파일)에</para-->
		
		<para>
			<programlisting language="xml">set PRE_CLASSPATH=%WL_HOME%\common\lib\antlr-2.7.6.jar(UNIX sh : set PRE_CLASSPATH="${WL_HOME}/common/lib/antlr-2.7.6.jar"</programlisting>
		</para>
		<para>at setDomainEnv.cmd(or .sh file)</para>
		<!-- para>
			set PRE_CLASSPATH=%WL_HOME%\common\lib\antlr-2.7.6.jar(UNIX sh : set PRE_CLASSPATH="${WL_HOME}/common/lib/antlr-2.7.6.jar"
			와 같이 추가해준다.
		</para-->
	</warning>
</chapter>