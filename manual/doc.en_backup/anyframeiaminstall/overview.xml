<chapter id="anyframeiaminstall_overview">
	<title>Anyframe IAM Core Install</title>

	<para>This chapter describes how to install IAM Core on the system
	</para>
	<!--
		para>이번 장에서는 사용자 어플리케이션에 설치되어 인증 및 권한 제어를 담당하는 Anyframe IAM Core를 설치
		하는 절차에 대해서 알아본다.</para
	-->
	<para>IAM Core installing procedures are the followings.</para>
	<!-- para>IAM Core 설치 절차는 다음과 같다.</para-->

	<itemizedlist>
		<listitem>
			<para>Copying JAR files</para>
		</listitem>
		<listitem>
			<para>Configuration</para>
		</listitem>
	</itemizedlist>

	<section id="anyframeiaminstall_corelibrarycopy">
		<title>Copying JAR files</title>
		
		<para>Copying JAR files is necessary to install IAM Core 1.1.3.</para>
		<!-- para>IAM Core 1.1.3 설치에는 jar 형식의 라이브러리 파일을 복사하는 과정이 필요하다.</para-->
		
		<para>Copy following jar files to target application's /WEB-INF/lib folder</para>
		<!--
			para>IAM Core 1.1.3 설치에는 다음 파일들이 필요 하다. 아래의 jar 파일을 해당 Web
			Application의 /WEB-INF/lib 폴더에 카피한다.</para
		-->
		<para>These files can be found in
			anyframe-iam-sample-1.1.3.war/WEB-INF/lib that is zipped in
			Anyframe-iam-1.1.3-bin.zip</para>
		<!--
			para>jar 파일들은 Anyframe-iam-1.1.3-bin.zip 파일을 압축 해제 한 후 하위의
			anyframe-iam-sample-1.1.3.war 파일을 다시 한번 압축 해제하면 찾을수 있다.</para
		-->

		<itemizedlist>
			<listitem>
				<para>anyframe-iam-core-1.1.3.jar</para>
			</listitem>
			<listitem>
				<para>anyframe-core-1.0.1.jar</para>
			</listitem>
			<listitem>
				<para>spring-security-acl-2.0.4.jar</para>
			</listitem>
			<listitem>
				<para>spring-security-core-2.0.4.jar</para>
			</listitem>
			<listitem>
				<para>spring-security-core-tiger-2.0.4.jar</para>
			</listitem>
			<listitem>
				<para>spring-security-taglibs-2.0.4.jar</para>
			</listitem>
		</itemizedlist>
	</section>

	<section id="anyframeiaminstall_customerconfiguration">
		<title>Configuration</title>

		<para>In general, it makes no problem to use the configuration of the
			given sample application.
			Following documents will explain how to set
			up and customize. 
		</para>

		<!--
			para>일반적인 경우 샘플 어플리케이션에서 제공하는 설정을 그대로 사용하면된다. 본 문서에서는 주요 설정 및 사용자 정의가
			가능한 부분을 위주로 설명을 한다. </para
		-->
		<sect2 id="anyframeiaminstall_customerconfiguration_sec001">
			<title>IAM Core Message file</title>
			<para>
				Add IAM message file at messageSource Bean configuration of
				application(normally it is defined in
				<emphasis role="bold">context-common.xml</emphasis>
				)
			</para>
			<programlisting language="xml">
<![CDATA[<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
    <property name="basenames">
        <list>
            ..
            <value>anyframe/iam/core/messages/security</value>
        </list>
    </property>
</bean>]]></programlisting>
		</sect2>

		<sect2 id="anyframeiaminstall_customerconfiguration_sec002">
			<title>Spring Security Filter Chain</title>
			<para>
				Make all the web requests to be sent to DelegatingFilterProxy of
				Spring Security. Add followings to
				<emphasis role="bold">web.xml</emphasis>
				setting.
			</para>

			<!--
				para>모든 웹 요청이 Spring Security의 DelegatingFilterProxy로 전달되도록
				<emphasis role="bold">web.xml</emphasis>에 설정을 추가한다.</para
			-->
			<programlisting language="xml">
<![CDATA[<filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
</filter>

<filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>]]></programlisting>
		</sect2>

		<sect2 id="anyframeiaminstall_customerconfiguration_sec003">
			<title>Configuration of IAM Admin Remote Linking</title>
			<para>
				Add settings for Resource information gathering and authorization
				reload of subject system at
				<emphasis role="bold">spring-security-servlet.xml</emphasis>
			</para>
			<!--
				>para> 보호대상 자원 정보 수집 및 런타임 갱신을 IAM Admin에서 Remote로 처리 할 수 있는 설정을
				<emphasis role="bold">spring-security-servlet.xml</emphasis> 파일에
				추가한다. </para
			-->
			<para>In general, it makes no problem to use the configuration of the
				given sample application. In case that there are additional
				resources wanted to be excluded, add following configuration. 
			</para>

			<para>Following configurations is example for exclude resources that
				have a prefix with org, net, java or anyframe(except resources that
				have a prefix with anyframe.iam.sample)</para>
			<!-- para>아래의 설정은 패키지 명이 org, net, java, anyframe(단 anyframe.iam.sample로
				시작하는 자원은 제외)으로 시작하는 자원을 정보 수집 대상에서 제외하는 설정의 예이다.</para-->
			<programlisting language="xml">
<![CDATA[<bean id="resourceGatherAssistService"
    class="anyframe.iam.core.assist.impl.ResourceGatherAssistServiceImpl" >
    <property name="filterPatterns">
        <list>
            <value>(?!anyframe\.iam\.sample\..*)anyframe\..*</value>
            <value>org\..*</value>
            <value>net\..*</value>
            <value>java\..*</value>
        </list>
    </property>
</bean>]]></programlisting>
		</sect2>

		<sect2 id="anyframeiaminstall_customerconfiguration_sec004">
			<title>Configuration for authorization and authentication</title>
			<!-- title>인증 및 권한 설정</title-->
			<para>
			Add the following configuration to 
				<emphasis role="bold">context-spring-security.xml</emphasis>
			</para>

			<!--  para>
				이하 모든 세팅은
				<emphasis role="bold">context-spring-security.xml</emphasis>
				파일에 적용한다.
			</para-->

			<para>
				Make form-login tag under http tag for authority based Form, 
				and add login-page, login-processing-url, authentication-failure-url,
				default-target-url attribute.
			</para>

			<!-- para>http 하위 태그로 form-login을 지정하여 Form 기반 인증을 설정하고
				login-page,
				login-processing-url, authentication-failure-url,
				default-target-url을 지정한다.
			</para-->
			
			<para>
				login-processing-url should be set as 
				<emphasis role="bold">/j_spring_security_check</emphasis> 
			</para>
			
			<!-- para>
				login-processing-url는 반드시
				<emphasis role="bold">/j_spring_security_check</emphasis>
				로 설정한다.
			</para-->
			
			<para>By using logout tag, a page after successful logout should be assigned.</para>
			
			<!-- para>
				또한 logout 태그를 이용하여 logout 성공후에 이동할 페이지를 지정한다.
			</para-->
			
			<programlisting language="xml">
<![CDATA[<http path-type="regex" lowercase-comparisons="false">
    <form-login login-page="/common/login.do" login-processing-url="/j_spring_security_check"
        authentication-failure-url="/common/login.do?login_error=1"
        default-target-url="/index.jsp?flag=L" />

        <anonymous />
        <logout logout-success-url="/index.jsp" />
</http>]]></programlisting>

			<para>
				Set property of jdbcUserService Bean for query about user authorization and Role information.
			</para>

			<!-- para>jdbcUserService Bean의 property 설정으로 사용자 인증과 권한(Role) 정보에 대한 쿼리를
				설정한다.</para-->
				
			<para>USER_ID, PASSWORD and ENABLED
			      information based on basic handling of Spring Security must be shown as
			      initial 3 inquiry fields.
			</para>
				
			<!-- para>usersByUsernameQuery의 경우 USER_ID, PASSWORD, ENABLED 필드는 항상
				1,2,3 번째 순서로 나타나야만 한다.</para-->
				
			<programlisting language="xml">
<![CDATA[<b:bean id="jdbcUserService"
    class="anyframe.iam.core.userdetails.jdbc.ExtJdbcUserDetailsManager" >
    <!-- USER_ID, PASSWORD, ENABLED should be placed in ordered 1, 2, 3 -->
    <b:property name="usersByUsernameQuery" value="SELECT USER_ID, PASSWORD, CASE WHEN ENABLED = 'Y' THEN 1 ELSE 0 END ENABLED, USER_NAME, CREATE_DATE, MODIFY_DATE FROM USERS WHERE USER_ID = ?"/>
    <b:property name="authoritiesByUsernameQuery">
        <b:value>
            SELECT USER_ID,ROLE_ID,GROUP_ID,SUBJECT_ID,TYPE
            FROM AUTHORITIES C, (
                SELECT A.USER_ID,B.GROUP_ID
                FROM USERS A LEFT OUTER JOIN GROUPS_USERS B ON ( A.USER_ID = B.USER_ID )
                WHERE A.USER_ID = ? ) D
            WHERE ( C.SUBJECT_ID = D.USER_ID
                OR C.SUBJECT_ID = D.GROUP_ID )
        </b:value>
    </b:property>
    <b:property name="dataSource" ref="dataSource"/>
</b:bean>]]></programlisting>
		</sect2>

		<sect2 id="anyframeiaminstall_customerconfiguration_sec005">
			<title>SecuredObject configuration</title>

			<para>
			Add the following configuration to 
				<emphasis role="bold">context-spring-security.xml</emphasis>
			</para>
			<!-- para>이하 세팅은 <emphasis role="bold">context-spring-security.xml</emphasis> 파일에 적용한다.</para-->
			
			<para>IAM manages data about secured resources of Spring Security, RoleHierarchy information and 
			resource based extended time based on DB.
			</para>

			<!-- para>IAM 에서는 Spring Security 의 보호자원, RoleHierarchy 정보, 확장한 Time 기반의
				보호자원에 대한 데이터를 DB 기반으로 처리하고 있다.</para-->
				
			<para>
				Following is default configuration for SecuredObject. When using same DB schema as IAM, use given default configuration.
			</para>

			<!-- para>SecuredObject에 대한 기본설정은 아래와 같다. IAM에서 제공하는 DB를 사용 할 경우 아래의
				설정만으로 충분하다.
			</para-->
					
			<programlisting language="xml">
<![CDATA[<b:bean id="securedObjectService" class="anyframe.iam.core.securedobject.impl.SecuredObjectServiceImpl">
    <b:property name="securedObjectDAO" ref="securedObjectDAO" />
</b:bean>

<b:bean id="securedObjectDAO" class="anyframe.iam.core.securedobject.impl.SecuredObjectDAO">
    <b:property name="dataSource" ref="dataSource" />
</b:bean>]]></programlisting>
			</sect2>
			
			<sect2 id="anyframeiaminstall_customerconfiguration_sec0052">
				<title>Customizing SecuredObject</title>
				<!-- title>SecuredObject 사용자화 설정</title-->
			<para>
			Add the following configuration to 
				<emphasis role="bold">context-spring-security.xml</emphasis>
			</para>
						
			<para>
				When using not same DB schema aas IAM, it's still available to use IAM Core using custom configuration about SecuredObject. 
			</para>

			<!-- para>만약 IAM에서 제공하는 DB Schema를 동일하게 사용 할 수 없는 경우에도 SecuredObject에 대한
				사용자 설정을 통해서 IAM Core의 적용이 가능하다.
			</para-->

			<para>
				Set custom configuration as property under securedObjectDAO bean. In this case if user want to use IAM Admin Console, 
				it's necessary to customize source code.
			</para>
			
			<!-- para>사용자 설정은 아래와 같이 securedObjectDAO bean의 하위에 property 설정을 통해 가능하다.
				단, 이 경우 IAM Admin Console 사용을 위해서는 customizing이 필요하다.</para-->

			<programlisting language="xml">
<![CDATA[<b:bean id="securedObjectDAO" class="anyframe.iam.core.securedobject.impl.SecuredObjectDAO">
    <b:property name="dataSource" ref="dataSource" />
    <b:property name="sqlRolesAndUrl">
        <b:value>
            SELECT a.resource_pattern url, b.role_id authority
            FROM secured_resources a, secured_resources_roles b
            WHERE a.resource_id = b.resource_id
                AND a.resource_type = 'url'
            ORDER BY a.sort_order, a.resource_id
        </b:value>    	
    </b:property>
</b:bean>]]></programlisting>

			<para>Following is default query of Secured Object that can be customized.</para>

			<!-- para>사용자 설정이 가능한 Secured Object 항목과 기본 쿼리는 다음과 같다.</para-->

			<itemizedlist>
				<listitem>
					<para>
						url type secured resource / Role mapping (sqlRolesAndUrl)
						
						<!-- sqlRolesAndUrl : url 형식 보호자원-Role 매핑 -->
						<programlisting>
<![CDATA[SELECT a.resource_pattern url, b.role_id authority
FROM secured_resources a, secured_resources_roles b
WHERE a.resource_id = b.resource_id
    AND a.resource_type = 'url'
ORDER BY a.sort_order, a.resource_id]]></programlisting>
					</para>
				</listitem>
				<listitem>
					<para>
					method type secured resource / Role mapping (sqlRolesAndMethod) 
						<!-- sqlRolesAndMethod : method 형식 보호자원-Role 매핑 -->
						<programlisting>
<![CDATA[SELECT a.resource_pattern url, b.role_id authority
FROM secured_resources a, secured_resources_roles b
WHERE a.resource_id = b.resource_id
    AND a.resource_type = 'method'
ORDER BY a.sort_order, a.resource_id]]></programlisting>
					</para>
				</listitem>
				<listitem>
					<para>
						pointcut type secured resource / Role mapping (sqlRolesAndPointcut) 
						<!-- sqlRolesAndPointcut : pointcut 형식 보호자원-Role 매핑-->
						<programlisting>
<![CDATA[SELECT a.resource_pattern url, b.role_id authority
FROM secured_resources a, secured_resources_roles b
WHERE a.resource_id = b.resource_id
    AND a.resource_type = 'pointcut'
ORDER BY a.sort_order, a.resource_id]]></programlisting>
					</para>
				</listitem>
				<listitem>
					<para>
						sqlRegexMatchedRequestMapping : request best matching url secured resource-Role mapping
						<programlisting>
<![CDATA[SELECT a.resource_pattern uri, b.role_id authority
FROM secured_resources a, secured_resources_roles b
WHERE a.resource_id = b.resource_id
    AND a.resource_id =
        ( SELECT resource_id FROM
            ( SELECT resource_id, ROW_NUMBER() OVER (ORDER BY sort_order) resource_order FROM secured_resources c
            WHERE REGEXP_LIKE ( :url, c.resource_pattern )
                AND c.resource_type = 'url'
            ORDER BY c.sort_order )
        WHERE resource_order = 1 )]]></programlisting>
					</para>
				</listitem>
				<listitem>
					<para>
						Role Hierarchy(sqlHierarchicalRoles) 
						<!-- sqlHierarchicalRoles : Role 계층구조-->
						<programlisting>
<![CDATA[SELECT a.child_role child, a.parent_role parent
FROM roles_hierarchy a LEFT JOIN roles_hierarchy b on (a.child_role = b.parent_role)]]></programlisting>
					</para>
				</listitem>
				<listitem>
					<para>
						sqlRestrictedTimesRoles : restricted times roles mapping
						<programlisting>
<![CDATA[SELECT time_type, a.time_id as time_id, start_date, start_time, end_date, end_time, role_id
FROM restricted_times a, restricted_times_roles b
WHERE a.time_id = b.time_id
ORDER BY time_type, start_date, start_time, end_date, end_time]]></programlisting>
					</para>
				</listitem>
				<listitem>
					<para>
						sqlRestrictedTimesResources : restricted times resources mapping
						<programlisting>
<![CDATA[SELECT time_type, a.time_id as time_id, start_date, start_time, end_date, end_time, b.resource_id as resource_id, resource_pattern, role_id as exclusion_role_id
FROM restricted_times a,
    restricted_times_resources b left outer join times_resources_exclusion c
    on (b.time_id = c.time_id and b.resource_id = c.resource_id)
    , secured_resources d
WHERE a.time_id = b.time_id
    AND b.resource_id = d.resource_id
    AND d.resource_type = 'url'
ORDER BY d.sort_order, time_type, start_date, start_time, end_date, end_time]]></programlisting>
					</para>
				</listitem>
				<listitem>
					<para>
						sqlViewResourceMapping : view resource mapping with given search condition(ROLE list, user id)
						<!-- sqlViewResourceMapping : 조건(ROLE 리스트, 사용자 아이디)에 따른 view resource
						매핑(sqlViewResourceMapping) -->
						<programlisting>
<![CDATA[SELECT view_resource_id, ref_type, ref_id, mask, permissions
FROM view_resources_mapping
WHERE view_resource_id = :viewResourceId
    AND (
        ( ref_id IN ( {{userRoleList}} ) AND ref_type = 'ROLE' )
        OR ( ref_id = :userId AND ref_type = 'USER' )
        OR ( ref_id = :groupId AND ref_type = 'GROUP' )
    )
ORDER BY CASE ref_type WHEN 'USER' THEN 1 WHEN 'GROUP' THEN 2 WHEN 'ROLE' THEN 3 ELSE 10 END, ref_id]]></programlisting>
					</para>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 id="anyframeiaminstall_customerconfiguration_sec006">
			<title>Exceptional Secured Resource Configuration</title>
			
			
			<!-- title>보호 예외 대상 자원 설정</title-->
			
			<para>
			Add the following configuration to 
				<emphasis role="bold">context-spring-security.xml</emphasis>
			</para>
			
			<para>
				IAM provides resources without processing Filter Chain when user regist resources 
				in Exceptional Secured Resource Configuration. (in general, image, css, js files are included)
			</para>

			<!-- para>
				모든 요청에 대해서 Spring Security Filter Chain을 통해 처리 하지만
				보호 예외 대상으로 등록 할 경우 Filter Chain을 거지치 않고 자원을 제공한다.
				(일반적으로 image, css, js 파일등에 대해서	설정한다.)
			</para-->
			
			<para>
				Assign intercept-url tag under http tag for exceptional secured resource.
			</para>
			
			<!-- para>
				http 하위의 intercept-url 태그로 보호 예외 대상 자원에 대해 filters="none" 을
				지정한다.
			</para-->
			
			<programlisting language="xml">
<![CDATA[<http path-type="regex" lowercase-comparisons="false">
    <intercept-url pattern="\A/sample/images/.*\Z" filters="none" />
    <intercept-url pattern="\A/sample/css/.*\Z" filters="none" />
    <intercept-url pattern="\A/sample/javascript/.*\Z" filters="none" />
</http>]]></programlisting>
		</sect2>

		<sect2 id="anyframeiaminstall_customerconfiguration_sec007">
			<title>Role Configuration</title>

			<para>
				When using hiearachical Role, set Role information as following.
				(The way to get Role information is shown SecuredObject configuration chapter.)
				It's not necessary to set Role configuration when user doesn't use hiearachical Role. 
			</para>

			<!-- para>계증형 구조의 Role 정보를 사용할 경우 아래와 같이 설정한다.(Role 정보를 가져오는 방법은 Secured
				Object 설정을 참조한다.) 계층형 Role 구조를 사용하지 않을 경우는 설정하지 않는다.</para-->

			<programlisting language="xml">
<![CDATA[<b:bean id="roleHierarchy" class="org.springframework.security.userdetails.hierarchicalroles.RoleHierarchyImpl">
    <b:property name="hierarchy" ref="hierarchyStrings" />
</b:bean>

<b:bean id="hierarchyStrings" class="anyframe.iam.core.userdetails.hierarchicalroles.HierarchyStringsFactoryBean" init-method="init">
    <b:property name="securedObjectService" ref="securedObjectService" />
</b:bean>]]></programlisting>
		</sect2>

		<sect2 id="anyframeiaminstall_customerconfiguration_sec008">
			
			<title>ACL configuration about View Resource</title>
			<!-- title>View Resource 에 대한 ACL 설정</title-->
			
			<para>
			Add the following configuration to 
				<emphasis role="bold">context-spring-security.xml</emphasis>
			</para>
			
			<para>
				IAM provides function that checks Permission about user definition View Resource.
				User can choose and apply Permission that is required at target system. 
			</para>
				
			<!--  para>사용자가 정의한 View Resource에 대해 매핑된 Permission 을 체크할 수 있는 기능을 제공한다.
				대상 시스템에 필요한 권한을 선택적으로 적용 할 수 있다.</para-->
				
			<itemizedlist>
				<listitem>
					<para>Default Permission : READ, WRITE, CREATE, DELETE, ADMINISTRATION</para>
				</listitem>
				<listitem>
					<para>Additional Permission : LIST, PRINT, REPORT, POPUP, DOWNLOAD, UPLOAD, HELP
					</para>
				</listitem>
				<listitem>
					<para>Reserved Permission : FNC0, FNC1, FNC2, FNC3, FNC4, FNC5, FNC6, FNC7,
						FNC8, FNC9</para>
				</listitem>
			</itemizedlist>
			<para>Following is an example that is configuration of READ, WRITE, CREATE, DELETE permission.</para>
			<!-- para>다음은 READ, WRITE, CREATE, DELETE, DOWNLOAD 권한만을 설정한 예제이다.</para-->
			<programlisting language="xml">
<![CDATA[<b:bean id="viewResourceAccessService"
    class="anyframe.iam.core.acl.impl.ViewResourceAccessServiceImpl">
    <b:property name="securedObjectService" ref="securedObjectService" />
    <b:property name="registeredPermissions">
        <b:list>
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.READ" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.WRITE" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.CREATE" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.DELETE" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.DOWNLOAD" />
        </b:list>
    </b:property>
</b:bean>

<b:bean id="anyframe.iam.core.acl.ExtBasePermission.READ"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.READ" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.WRITE"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.WRITE" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.CREATE"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.CREATE" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.DELETE"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.DELETE" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.DOWNLOAD"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.DOWNLOAD" />
</b:bean>]]></programlisting>

		</sect2>

	</section>
</chapter>