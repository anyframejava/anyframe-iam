<chapter id="anyframeiamcore_configuration">
  <title>IAM Core Configuration</title>

  <para>SpringSecurity supports XML setting only
  basically. When supporting xml setting only, it cost system maintain and
  high possibility of sustaining by huge and complicated attribute files so it
  not prefer type for enterprise application.</para>

  <para>To solve this problems, Anyframe IAM Core was developed as running
  Database based setting information by extending Spring Security. Take a look
  at how to set a IAM Core in this document</para>

  <section id="anyframeiamcore_securityconfiguration">
    <title>Security Configuration</title>

    <itemizedlist>
      <para>Generally, essential library for applying a Spring Security basic
      function is the followings.</para>

      <listitem>
        <para>spring-security-core-2.0.4.jar</para>
      </listitem>

      <listitem>
        <para>spring-security-taglibs-2.0.4.jar</para>
      </listitem>
    </itemizedlist>

    <para>IAM Core provides extended function of spring-security-core,
    spring-security-acl, spring-security-taglibs and for applying
    annotation based Method security, spring-security-core-tiger is also used
    so it’s general that above 4 Spring Security library is included. 
    IAM Core also uses AOP related library such as Spring and AspectJ, 
    with a part of Apache Commons library.</para>

    <itemizedlist>
      <para><emphasis role="bold">web.xml registration </emphasis></para>

      <listitem>
        <para>Registration of
        org.springframework.web.filter.DelegatingFilterProxy : Spring
        Framework class that represent filter implementation registered as
        Spring bean in Application Context.</para>
      </listitem>

      <listitem>
        <para>Make all the web request send to DelegatingFilterProxy of Spring
        Security.</para>
      </listitem>

      <listitem>
        <para>DelegatinFilterProxy is generally used class for sending web
        request to different filter based on other URL pattern.</para>
      </listitem>

      <listitem>
        <para>This assigned filter is controlled in application context and it
        can share the advantage of Dependency Injection.</para>
      </listitem>
    </itemizedlist>

    <para>Setting Example</para>

    <programlisting language="xml">
<![CDATA[
<filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
</filter>

<filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
</filter-mapping>

..
<!-- if you wish to use Concurrent Session Control
<listener>
	<listener-class>
		org.springframework.security.ui.session.HttpSessionEventPublisher
	</listener-class>
</listener>
 -->]]>
 </programlisting>

    <itemizedlist>
      <para><emphasis role="bold">Security Namespace</emphasis></para>

      <listitem>
        <para>since Spring Security 2.0.x</para>
      </listitem>

      <listitem>
        <para>More simple setting than previous complicated setting of
        Security bean</para>
      </listitem>

      <listitem>
        <para>Providing for very commonly used case as made in advance without
        understanding of implement of under-structure</para>
      </listitem>

      <listitem>
        <para>All the functions of Security are not included and there are some
        part that is hard to change/extend</para>
      </listitem>
    </itemizedlist>

    <itemizedlist>
      <para>Main tag of Spring Security setting file based on Namespace</para>

      <listitem>
        <para><![CDATA[<http>]]></para>
      </listitem>

      <listitem>
        <para><![CDATA[<intercept-url … />]]></para>
      </listitem>

      <listitem>
        <para><![CDATA[<global-method-security />]]></para>
      </listitem>

      <listitem>
        <para><![CDATA[<jdbc-user-service />]]></para>
      </listitem>

      <listitem>
        <para><![CDATA[...]]></para>
      </listitem>
    </itemizedlist>

    <para>Example of Spring Security setting based on Namespace</para>

    <programlisting language="xml">
<![CDATA[
<b:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:b="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    					http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
                        http://www.springframework.org/schema/security 
                        http://www.springframework.org/schema/security/
                        spring-security-2.0.4.xsd">
                        
    <http path-type="regex" lowercase-comparisons="false">
        <intercept-url pattern="\A/sample/images/.*\Z" filters="none" />
        <intercept-url pattern="\A/sample/css/.*\Z" filters="none" />
        <intercept-url pattern="\A/sample/javascript/.*\Z" filters="none" />

        <intercept-url pattern="\A/login\.do.*\Z" access="IS_AUTHENTICATED_ANONYMOUSLY" />
        <intercept-url pattern="\A/security/users/list\.do.*\Z" access="ROLE_USER" />
        <intercept-url pattern="\A/.*\.do.*\Z" access="ROLE_RESTRICTED" />
        <intercept-url pattern="\A/.*\Z" access="IS_AUTHENTICATED_ANONYMOUSLY" />

        <form-login login-page="/login.do" login-processing-url="/j_spring_security_check"
            authentication-failure-url="/login.do?login_error=1"
            default-target-url="/plugins.do" />

        <anonymous />
        <logout logout-success-url="/plugins.do" />

        <!--
            if you wish to use Concurrent Session Control - see also listener
            configuration of web.xml - HttpSessionEventPublisher
        -->
        <concurrent-session-control max-sessions="1" exception-if-maximum-exceeded="true" />

    </http>
    
    <authentication-provider>
        <password-encoder hash="md5"/>
        <jdbc-user-service data-source-ref="dataSource"
            users-by-username-query=
            	"SELECT USER_ID, PASSWORD, ENABLED FROM USERS WHERE USER_ID = ?"
            authorities-by-username-query=
            	"SELECT SUBJECT_ID AS USER_ID, ROLE_ID FROM AUTHORITIES 
            	WHERE SUBJECT_ID = ?"
        />
    </authentication-provider>
    
    <global-method-security secured-annotations="enabled" jsr250-annotations="enabled">
        <protect-pointcut expression="execution(* security..UsersService.remove(..))" 
        access="ROLE_ADMIN" />
    </global-method-security>
    
</b:beans>]]>
</programlisting>

    <para>Above is a setting example of Namespace tag based authentication and
    authorization of Spring Security</para>

    <itemizedlist>
      <listitem>
        <para>Main security function of Spring Security is set through http
        tag automatically. Regular expression url pattern macher is used through path-type
        attribute on above and lowercase-comparisons as false is an example
        that keep the capital, small letter of url pattern as original
        copy.</para>
      </listitem>

      <listitem>
        <para>As an intercept-url tag under the http, assigning filters="none"
        for upper case of static web resource such as images, css, javascript
        and it is set to provide without running Filter Chain of Spring
        Security.</para>
      </listitem>

      <listitem>
        <para>Authority is assigned through access attribute at
        intercept-url tag and login.do pattern for moving login page on above
        is opened to access to anybody. ROLE_USER authority is assigned
        for /security/users/list.do and it is example that ROLE_RESTRICTED for
        all the .do pattern, anybody access for all other pattern.</para>
      </listitem>

      <listitem>
        <para>Set by HTML Form based authorization as assigning a
        form-login and assigning a page when failing login or login-page,
        moving to basic page for succession authorization.</para>
      </listitem>

      <listitem>
        <para>AnonymousProcessingFilter is added automatically if anonymous
        tag is set and basic Role, ROLE_ANONYMOUS, is treated when accessing
        unauthorized user.</para>
      </listitem>

      <listitem>
        <para>Assigning the returning page when succession of logout through
        logout tag.</para>
      </listitem>

      <listitem>
        <para>Assigning the number that one user can access at a same time
        through concurrent-session-control tag. Listener for
        HttpSessionEventPublisher at web.xml along with this tag must be
        assigned.</para>
      </listitem>

      <listitem>
        <para>DaoAuthenticationProvider is set when using an
        authenication-provider tag as basic and JDBC based UerDetailsService
        is used for checking user information according to the id,password.
        Example of md5 as one-way hash algorithim to make double encryption
        impossible for assigning password-encoder for encryption of user
        password on above. Encrypted password with comparison is treated when
        authorize user. (It is not mentioned on above, when developing a service
        for user password data changing, it need to be encrypted through
        password encoder bean as same. See the Security sample of Anyframe
        4.0.0 for Related example.)</para>
      </listitem>

      <listitem>
        <para>Through global-method-security tag, setting secured control for
        execution method and on above example, @RolesAllowed annotation of
        jsr250, Spring Security itself are set to use @Secured annotation and
        as an Pointcut expression of AspectJ, assigning ROLE_ADMIN
        authorization for remove of user service. It recommends that service
        should be written as interface-implementation form for applying Sping
        AOP and CGLib applying is needed for AOP applying when interface is
        not exist.</para>
      </listitem>
    </itemizedlist>
  </section>

  <section id="anyframeiamcore_databaseconfiguration">
    <title>Database Configuration</title>

    <para>Table related user authorization is user table and user authorized
    table and there are table related user authorized like role, resource,
    role hierarchy</para>

		<table frame="all">
			<title>IAM Table</title>
			<tgroup cols="3">
				<thead>
					<row>
						<entry></entry>
						<entry>Table Name</entry>
						<entry>Description</entry>					
					</row>
				</thead>
				<tbody>
					<row>
						<entry>User Info.</entry>
						<entry>USERS</entry>
						<entry>User Information</entry>
					</row>
					<row>
						<entry morerows="2" valign="center">Group Info.</entry>
						<entry>GROUPS</entry>
						<entry>User Group Information</entry>
					</row>
					<row>
						<entry>GROUPS_HIERARCHY</entry>
						<entry>Hierarchical data of user groups</entry>
					</row>
					<row>
						<entry>GROUPS_USERS</entry>
						<entry>User-Group Mapping Information</entry>
					</row>
					<row>
						<entry morerows="2" valign="middle">Role Info.</entry>
						<entry>ROLES</entry>
						<entry>ROLE Information</entry>
					</row>
					<row>
						<entry>ROLES_HIERARCHY</entry>
						<entry>Hierarchical data of Roles</entry>
					</row>
					<row>
						<entry>AUTHORITIES</entry>
						<entry>Role-User or Role-Group Mapping Information</entry>
					</row>
					<row>
						<entry morerows="2" valign="middle">Secured Resource Info.</entry>
						<entry>SECURED_RESOURCES</entry>
						<entry>Secured Resource Information</entry>
					</row>
					<row>
						<entry>SECURED_RESOURCES_ROLES</entry>
						<entry>Secured Resource-Role Mapping Information</entry>
					</row>
					<row>
						<entry>CANDIDATE_SECURED_RESOURCES</entry>
						<entry>Candidate Secured Resource Information</entry>
					</row>
					<row>
						<entry morerows="1" valign="middle">View Resource Info.</entry>
						<entry>VIEW_RESOURCES</entry>
						<entry>View Resource Information</entry>
					</row>
					<row>
						<entry>VIEW_RESOURCES_MAPPING</entry>
						<entry>View resource-Role Mapping information</entry>
					</row>
					<row>
						<entry morerows="3" valign="middle">Restricted Time Info.</entry>
						<entry>RESTRICTED_TIMES</entry>
						<entry>Restricted Time Information</entry>
					</row>
					<row>
						<entry>RESTRICTED_TIMES_RESOURCES</entry>
						<entry>Restricted Time-Resource Mapping Information</entry>
					</row>
					<row>
						<entry>RESTRICTED_TIMES_ROLES</entry>
						<entry>Restricted Time-Role Mapping Information</entry>
					</row>
					<row>
						<entry>TIME_RESOURCES_EXCLUSION</entry>
						<entry>Time Exclusion Information</entry>
					</row>
					<row>
						<entry>etc..</entry>
						<entry>IDS</entry>
						<entry>ID generating information</entry>
					</row>
				</tbody>
			</tgroup>
		</table>

		<para>See more information about DDL that is in <link linkend="appendix_schema">Appendix B. IAM Database Schema</link>.</para>
		<!-- para>해당 테이블의 ERD는 다음과 같으며 각 테이블의 DDL 문장은 <link linkend="appendix_schema">IAM Database Schema</link>를 참조한다.</para-->
		
    <mediaobject>
      <imageobject>
        <title>DaoAuthenticationProvidor</title>

		<imagedata scalefit="1" width="100%" align="center"
					fileref="../image/anyframeiam/db_schema.png" />
      </imageobject>
    </mediaobject>

<!-- 
    <para>IAM DB Schema DDL</para>

    <programlisting>
<![CDATA[CREATE TABLE GROUPS ( 
  GROUP_ID     VARCHAR (20)  NOT NULL, 
  GROUP_NAME   VARCHAR (50)  NOT NULL, 
  CREATE_DATE  VARCHAR (8), 
  MODIFY_DATE  VARCHAR (8), 
  CONSTRAINT PK_GROUPS
  PRIMARY KEY ( GROUP_ID ) ) ; 

CREATE TABLE GROUPS_HIERARCHY ( 
  PARENT_GROUP  VARCHAR (50)  NOT NULL, 
  CHILD_GROUP   VARCHAR (50)  NOT NULL, 
  CREATE_DATE   VARCHAR (8), 
  MODIFY_DATE   VARCHAR (8), 
  CONSTRAINT PK_GROUPS_HIERARCHY PRIMARY KEY ( PARENT_GROUP, CHILD_GROUP ),
  CONSTRAINT FK_GROUPS1 FOREIGN KEY (PARENT_GROUP) REFERENCES GROUPS (GROUP_ID),
  CONSTRAINT FK_GROUPS2 FOREIGN KEY (CHILD_GROUP) REFERENCES GROUPS (GROUP_ID) ) ; 

CREATE TABLE USERS ( 
  USER_ID      VARCHAR (20)  NOT NULL, 
  USER_NAME    VARCHAR (50)  NOT NULL, 
  PASSWORD     VARCHAR (50)  NOT NULL, 
  ENABLED      CHAR (1), 
  CREATE_DATE  VARCHAR (8), 
  MODIFY_DATE  VARCHAR (8), 
  CONSTRAINT PK_USERS
  PRIMARY KEY ( USER_ID ) ) ; 

CREATE TABLE GROUPS_USERS ( 
  GROUP_ID     VARCHAR (20)  NOT NULL, 
  USER_ID      VARCHAR (20)  NOT NULL, 
  CREATE_DATE  VARCHAR (8), 
  MODIFY_DATE  VARCHAR (8), 
  CONSTRAINT PK_GROUPS_USERS PRIMARY KEY ( GROUP_ID, USER_ID ),
  CONSTRAINT FK_GROUPS_USERS_GROUP_ID FOREIGN KEY (GROUP_ID) REFERENCES GROUPS (GROUP_ID),
  CONSTRAINT FK_GROUPS_USERS_USER_ID FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID) ) ; 

CREATE TABLE ROLES ( 
  ROLE_ID      VARCHAR (50)  NOT NULL, 
  ROLE_NAME    VARCHAR (50), 
  DESCRIPTION  VARCHAR (100), 
  CREATE_DATE  VARCHAR (8), 
  MODIFY_DATE  VARCHAR (8), 
  CONSTRAINT PK_ROLES PRIMARY KEY ( ROLE_ID ) ) ; 

CREATE TABLE ROLES_HIERARCHY ( 
  PARENT_ROLE  VARCHAR (50)  NOT NULL, 
  CHILD_ROLE   VARCHAR (50)  NOT NULL, 
  CREATE_DATE  VARCHAR (8), 
  MODIFY_DATE  VARCHAR (8), 
  CONSTRAINT PK_ROLES_HIERARCHY PRIMARY KEY ( PARENT_ROLE, CHILD_ROLE ),
  CONSTRAINT FK_ROLES1 FOREIGN KEY(PARENT_ROLE) REFERENCES ROLES(ROLE_ID),
  CONSTRAINT FK_ROLES2 FOREIGN KEY(CHILD_ROLE) REFERENCES ROLES (ROLE_ID) ) ; 

CREATE TABLE SECURED_RESOURCES ( 
  RESOURCE_ID       VARCHAR (10)  NOT NULL, 
  RESOURCE_NAME     VARCHAR (50), 
  RESOURCE_PATTERN  VARCHAR (300)  NOT NULL, 
  DESCRIPTION       VARCHAR (100), 
  RESOURCE_TYPE     VARCHAR (10)  NOT NULL, 
  SORT_ORDER        NUMERIC, 
  CREATE_DATE       VARCHAR (8), 
  MODIFY_DATE       VARCHAR (8), 
  CONSTRAINT PK_RECURED_RESOURCES
  PRIMARY KEY ( RESOURCE_ID ) ) ; 

CREATE TABLE SECURED_RESOURCES_ROLES ( 
  RESOURCE_ID  VARCHAR (10)  NOT NULL, 
  ROLE_ID      VARCHAR (50)  NOT NULL, 
  CREATE_DATE  VARCHAR (8), 
  MODIFY_DATE  VARCHAR (8), 
  CONSTRAINT PK_SECURED_RESOURCES_ROLES PRIMARY KEY ( RESOURCE_ID, ROLE_ID ),
  CONSTRAINT FK_SECURED_RESOURCES FOREIGN KEY(RESOURCE_ID) 
		REFERENCES SECURED_RESOURCES(RESOURCE_ID),
  CONSTRAINT FK_ROLES4 FOREIGN KEY (ROLE_ID) 
  		REFERENCES ROLES(ROLE_ID) ) ;
  
CREATE TABLE AUTHORITIES ( 
  ROLE_ID      VARCHAR (50)  NOT NULL, 
  SUBJECT_ID   VARCHAR (20)  NOT NULL, 
  TYPE         VARCHAR (2)  NOT NULL, 
  CREATE_DATE  VARCHAR (8), 
  MODIFY_DATE  VARCHAR (8), 
  CONSTRAINT PK_AUTHORITIES PRIMARY KEY ( ROLE_ID, SUBJECT_ID ),
  CONSTRAINT FK_ROLES3 FOREIGN KEY(ROLE_ID) REFERENCES ROLES(ROLE_ID) ) ; 
  
CREATE TABLE RESTRICTED_TIMES (
	TIME_ID		VARCHAR(10) NOT NULL,
	TIME_TYPE	VARCHAR(10) NOT NULL,  crash, holiday, weekend, improve, daily
	START_DATE	VARCHAR(8),
	START_TIME	VARCHAR(6) NOT NULL,
	END_DATE	VARCHAR(8),
	END_TIME		VARCHAR(6) NOT NULL,
	DESCRIPTION	VARCHAR(100),
	CONSTRAINT PK_RESTRICTED_TIMES PRIMARY KEY(TIME_ID)
);

CREATE TABLE RESTRICTED_TIMES_RESOURCES (
	TIME_ID VARCHAR(10) NOT NULL,
	RESOURCE_ID VARCHAR(10) NOT NULL,
	CONSTRAINT PK_RESTRICTED_TIMES_RESOURCES  PRIMARY KEY(TIME_ID, RESOURCE_ID),
	CONSTRAINT FK_TIMES_RESOURCES_TIME_ID FOREIGN KEY (TIME_ID) 
			REFERENCES RESTRICTED_TIMES(TIME_ID),
	CONSTRAINT FK_TIMES_RESOURCES_RESOURCE_ID FOREIGN KEY(RESOURCE_ID) 
			REFERENCES SECURED_RESOURCES(RESOURCE_ID)
);

CREATE TABLE TIMES_RESOURCES_EXCLUSION (
	TIME_ID VARCHAR(10) NOT NULL,
	RESOURCE_ID VARCHAR(10) NOT NULL,
	ROLE_ID	VARCHAR(50) NOT NULL,
	CONSTRAINT PK_EXCLUSION  PRIMARY KEY(TIME_ID, RESOURCE_ID, ROLE_ID),
	CONSTRAINT FK_EXCLUSION_TIME_ID FOREIGN KEY (TIME_ID) 
			REFERENCES RESTRICTED_TIMES(TIME_ID),
	CONSTRAINT FK_EXCLUSION_RESOURCE_ID FOREIGN KEY(RESOURCE_ID) 
			REFERENCES SECURED_RESOURCES(RESOURCE_ID),
	CONSTRAINT FK_EXCLUSION_ROLE_ID FOREIGN KEY(ROLE_ID) 
			REFERENCES ROLES(ROLE_ID)
);


CREATE TABLE RESTRICTED_TIMES_ROLES (
	TIME_ID VARCHAR(10) NOT NULL,
	ROLE_ID VARCHAR(50) NOT NULL,
	CONSTRAINT PK_RESTRICTED_TIMES_ROLES  PRIMARY KEY(TIME_ID, ROLE_ID),
	CONSTRAINT FK_TIMES_ROLES_TIME_ID FOREIGN KEY (TIME_ID) 
			REFERENCES RESTRICTED_TIMES(TIME_ID),
	CONSTRAINT FK_TIMES_ROLES_ROLE_ID FOREIGN KEY(ROLE_ID) 
			REFERENCES ROLES(ROLE_ID)
);

CREATE TABLE VIEW_RESOURCES  (
	VIEW_RESOURCE_ID 	VARCHAR(50) NOT NULL,	ex.) LOGI_001
	CATEGORY	VARCHAR(255),		ex.) Distribution > Warehousing Management
	VIEW_NAME	VARCHAR(50) NOT NULL,	ex.) noneWarehousing
	DESCRIPTION	VARCHAR(255) NOT NULL,	ex.) Order List of none-WareHouesing
	VIEW_INFO	VARCHAR(255),		ex.) Additional information of page
	CONSTRAINT PK_VIEW_RESOURCES  PRIMARY KEY(VIEW_RESOURCE_ID)
);

CREATE TABLE VIEW_RESOURCES_MAPPING  (
	VIEW_RESOURCE_ID VARCHAR(50) NOT NULL,
	REF_ID VARCHAR(50) NOT NULL,		ex.) ROLE_ID or USER_ID
	MASK INTEGER NOT NULL,			ex.) 1(R), 2(W), 4(C), 8(D), 16(A)
	PERMISSIONS VARCHAR(255) NOT NULL,	ex.) READ, WRITE, CREATE, DELETE, ADMINISTRATION
	REF_TYPE VARCHAR(10) NOT NULL,		ex.) ROLE or USER [todo:// or GROUP]
	CONSTRAINT PK_VIEW_RESOURCES_MAPPING  PRIMARY KEY(VIEW_RESOURCE_ID, REF_ID),
	CONSTRAINT FK_MAPPING_VIEW_RESOURCE_ID  FOREIGN KEY (VIEW_RESOURCE_ID) 
			REFERENCES VIEW_RESOURCES (VIEW_RESOURCE_ID)
);

CREATE TABLE IDS ( 
  TABLE_NAME  VARCHAR (16)  NOT NULL, 
  NEXT_ID     NUMERIC (30)   NOT NULL, 
  PRIMARY KEY ( TABLE_NAME ) ) ;
  
CREATE TABLE CANDIDATE_SECURED_RESOURCES (
	CANDIDATE_RESOURCE_ID	NUMERIC(10)		NOT NULL,
	BEANID					VARCHAR(128),
	PACKAGES				VARCHAR(128)	NOT NULL,
	CLASSES					VARCHAR(128),
	METHOD					VARCHAR(128),
	PARAMETER				VARCHAR(128),
	REQUESTMAPPING			VARCHAR(128),
	POINTCUT				VARCHAR(128),
	CANDIDATE_RESOURCE_TYPE	VARCHAR(10)	NOT NULL,
	CONSTRAINT	CANDIDATE_SECURED_RESOURCES_PK	PRIMARY KEY(CANDIDATE_RESOURCE_ID)
);]]>
</programlisting>
-->
  </section>

  <section id="anyframeiamcore_extensionconfiguration">
    <title>IAM Core Extensions Configuration</title>

    <para>Let’s take a look at the extending based setting that is used at
    Anyframe IAM Core. Sample application provided with IAM is used as it
    generally so, understands of meaning of setting is focused.</para>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec001">
      <title>Setting of IAM Message file</title>

      <para>Adding IAM message file to messageSource bean setting (generally
      existed at context-common.xml) of target application as below.</para>

      <programlisting language="xml">
<![CDATA[    
<bean id="messageSource" 
		class="org.springframework.context.support.ResourceBundleMessageSource">
	<property name="basenames">
		<list>
			..
			<value>anyframe/iam/core/messages/security</value>
		</list>
	</property>
</bean>
]]>
    </programlisting>
    </sect2>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec002">
      <title>JDBC based authorization extension &amp; applying group
      authorization additionally when login</title>

      <para>Applying ExtJdbcUserDetailsManager of IAM instead of
      <![CDATA[<jdbc-user-service />]]> of Spring Security</para>

      <programlisting language="xml">
<![CDATA[    
<b:bean id="jdbcUserService"
            class="anyframe.iam.core.userdetails.jdbc.ExtJdbcUserDetailsManager" >
        <!-- Set the property name when group related with user 
        	 is inquired at usersByUsernameQuery -->
        <b:property name="userGroupPropertyName" value="GROUP_ID"/>
        <!-- USER_ID, PASSWORD, ENABLED should be placed in ordered 1, 2, 3 -->
        <b:property name="usersByUsernameQuery">
            <b:value>
              SELECT A.USER_ID AS USER_ID, PASSWORD, CASE 
				WHEN ENABLED = 'Y' THEN 1 ELSE 0 END ENABLED, 
				B.GROUP_ID AS GROUP_ID, USER_NAME, USER_NAME, CREATE_DATE, MODIFY_DATE
              FROM USERS A LEFT OUTER JOIN GROUPS_USERS B 
                   ON ( A.USER_ID = B.USER_ID ) 
              WHERE A.USER_ID = ?
            </b:value>
        </b:property>
        <b:property name="authoritiesByUsernameQuery">
            <b:value>
            SELECT USER_ID,ROLE_ID,GROUP_ID,SUBJECT_ID,TYPE
              FROM AUTHORITIES C, (
				SELECT A.USER_ID,B.GROUP_ID
					FROM USERS A LEFT 
					OUTER JOIN GROUPS_USERS B ON ( A.USER_ID = B.USER_ID )
						WHERE A.USER_ID = ? ) D
             WHERE ( C.SUBJECT_ID = D.USER_ID
                          OR C.SUBJECT_ID = D.GROUP_ID )
            </b:value>
        </b:property>
        <b:property name="dataSource" ref="dataSource"/>
        <!-- If you want to use user define CustomeUSerVO, 
        	 register Mapping SqlQuery that contains the logic at makeCustomUser()
        	 with ExtUsersByUsernameMapping extension -->
        <!-- <b:property name="mapClass" 
        	  value="anyframe.iam.core.userdetails.jdbc.CustomUsersByUsernameMapping"/> -->
    </b:bean>
    
    ..
    <authentication-manager alias="authenticationManager" />
    <authentication-provider user-service-ref="jdbcUserService" />
]]>
	</programlisting>

      <para>This is example that make custom user information save as
      UserDetails extension object of Spring Security and make loading an
      authority for group as user authority when login. If mapClass is
      not assigned, custom user information is treated as Map type,
      ExtUsersByUsernameMapping of IAM, but user provide with writing extended
      mapping object(see the javadoc for related example of
      ExtUsersByUsernameMapping) and also property name for user group make it
      possible to set. Default value is userGroup.</para>

      <para>Below is the example of how to obtain a custom user object using
      CustomUserDetailsHelper. Below user information object access not only
      web layer but whole application layer as same way.</para>

      <programlisting language="java">
<![CDATA[    
ExtUser extUser = CustomUserDetailsHelper.getAuthenticatedUser();
    Map customUserMap = (Map) extUser.getCustomUser();
    // For applying by writing a mapClass to treat mapping as JavaBeans called CustomUser  
    // CustomUser customUser = (CustomUser) extUser.getCustomUser();
]]>
    </programlisting>
    </sect2>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec003">
      <title>DB based data controlling for SecuredObject</title>

      <para>Data for Secured resource of Spring Security, RoleHierarchy, and
      extended time restriction based secured resource is treated at IAM. When operating a
      container, its structure is treated by requiring once(or reload is
      required). </para>

      <programlisting language="xml">
<![CDATA[    
<b:bean id="securedObjectService" 
		class="anyframe.iam.core.securedobject.impl.SecuredObjectServiceImpl">
	<b:property name="securedObjectDAO" ref="securedObjectDAO" />
</b:bean>

<b:bean id="securedObjectDAO" 
   		class="anyframe.iam.core.securedobject.impl.SecuredObjectDAO">
    <b:property name="dataSource" ref="dataSource" />
</b:bean>
]]>
    </programlisting>

      <para>When IAM Core is applied without using DB Schema of IAM or
      considered wheather query changing is needed for some DB table is different so,
      securedObjectDAO can be customized user about 
      sqlRolesAndUrl, sqlRolesAndMethod, sqlRolesAndPointcut,
      sqlRegexMatchedRequestMapping, sqlHierarchicalRoles,
      sqlRestrictedTimesRoles, sqlRestrictedTimesResources,
      sqlViewResourceMapping. For more details, see a <link linkend="anyframeiaminstall_customerconfiguration_sec0052">SecuredObject Configuration</link> or
      SecuredObjectDAO source. </para>
    </sect2>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec004">
      <title>Applying for making Hierarchical Role based on DB </title>

      <para>RoleHierarchy treating of Spring Security is used as it is,
      Hierarchy data of Role for DB based is added. </para>

      <programlisting language="xml">
<![CDATA[    
<b:bean id="roleHierarchy" 
	class="org.springframework.security.userdetails.
			hierarchicalroles.RoleHierarchyImpl">
        <b:property name="hierarchy" ref="hierarchyStrings" />
    </b:bean>

    <b:bean id="hierarchyStrings" 
    class="anyframe.iam.core.userdetails.
    		hierarchicalroles.HierarchyStringsFactoryBean"
            init-method="init">
        <b:property name="securedObjectService" ref="securedObjectService" />
    </b:bean>

    <b:bean id="userDetailsServiceWrapper" 
    class="org.springframework.security.userdetails.
    		hierarchicalroles.UserDetailsServiceWrapper">
        <b:property name="roleHierarchy" ref="roleHierarchy" />
        <b:property name="userDetailsService" ref="jdbcUserService" />
    </b:bean>
    ..
    <authentication-provider user-service-ref="userDetailsServiceWrapper" />
]]>
    </programlisting>

      <programlisting language="xml">
<![CDATA[    
<b:bean id="roleHierarchy" 
	class="org.springframework.security.userdetails.
			hierarchicalroles.RoleHierarchyImpl">
    <b:property name="hierarchy" ref="hierarchyStrings" />
</b:bean>

<b:bean id="hierarchyStrings" 
class="anyframe.iam.core.userdetails.
		hierarchicalroles.HierarchyStringsFactoryBean"
        init-method="init">
    <b:property name="securedObjectService" ref="securedObjectService" />
</b:bean>

<b:bean id="accessDecisionManager" 
class="org.springframework.security.vote.AffirmativeBased">
    <b:property name="allowIfAllAbstainDecisions" value="false" />
    <b:property name="decisionVoters">
        <b:list>
            <!-- RoleHierarchyVoter -->
            <b:bean class="org.springframework.security.vote.RoleHierarchyVoter">
	<b:constructor-arg ref="roleHierarchy" />
			</b:bean>
            <b:bean class="org.springframework.security.vote.AuthenticatedVoter" />
        </b:list>
    </b:property>
</b:bean>]]>
</programlisting>

      <para>Spring Security provides 2 way to manage RoleHierarchy. One is for
      origin jbdcUserService is wrapped by using a UserDetailsServiceWrapper,
      the other is for RoleVoter is not set but RoleHierarchyVoter(use a
      roleHierarchy in it)when processing AccessDecisionVoter without wrapping.
      UserDetailsServiceWrapper formed instruction for treating to include
      Role under the target user Role when user login at Anyframe IAM is
      recommended, RoleHierarchyVoter treatment is needed under the Session
      Clustering applying environment of WAS. (Without a Serializable
      currently, RoleHierarchyImpl of Spring Security would occur problem as
      it is saved in Authentication object. Request for Serializable is
      uploaded at JITA which is issue management system of Spring
      Security)</para>
    </sect2>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec005">
      <title>Applying for making Secured Resource(Url) – Role Mapping based on DB 
      </title>

      <para>Aside from FilterSecurityInterceptor and
      DefaultFilterInvocationDefinitionSource that are included as default at
      Namespace, adding below setting for applying secured
      resource(Url)-authorization mapping based on DB.</para>

      <programlisting language="xml">
<![CDATA[    
<b:bean id="accessDecisionManager" 
	class="org.springframework.security.vote.AffirmativeBased">
    <b:property name="allowIfAllAbstainDecisions" value="false" />
    <b:property name="decisionVoters">
        <b:list>
            <b:bean class="org.springframework.security.vote.RoleVoter">
                <b:property name="rolePrefix" value="" />
            </b:bean>
            <b:bean class="org.springframework.security.vote.AuthenticatedVoter" />
        </b:list>
    </b:property>
</b:bean>

<b:bean id="filterSecurityInterceptor" 
class="org.springframework.security.intercept.web.FilterSecurityInterceptor">
    <custom-filter after="FILTER_SECURITY_INTERCEPTOR" />
    <!-- Note that FilterSecurityInterceptor is included at Namespace basically 
    but it not operate for Filter type as same type 
    without setting observeOncePerRequest.-->
    <b:property name="observeOncePerRequest" value="false" />
    <b:property name="authenticationManager" ref="authenticationManager" />
    <b:property name="accessDecisionManager" ref="accessDecisionManager" />
    <b:property name="objectDefinitionSource" ref="databaseObjectDefinitionSource" />
</b:bean>

<b:bean id="databaseObjectDefinitionSource"
    class="org.springframework.security.intercept.web
    .AnyframeReloadableDefaultFilterInvocationDefinitionSource">
    <b:constructor-arg ref="regexUrlPathMatcher" />
    <b:constructor-arg ref="requestMap" />
    <b:property name="securedObjectService" ref="securedObjectService" />
</b:bean>

<b:bean id="regexUrlPathMatcher" 
class="org.springframework.security.util.RegexUrlPathMatcher" />

<b:bean id="requestMap" 
class="anyframe.iam.core.intercept.ResourcesMapFactoryBean" init-method="init">
    <b:property name="securedObjectService" ref="securedObjectService" />
    <b:property name="resourceType" value="url" />
</b:bean>
]]>
    </programlisting>

      <para>To provide an authorization treatment function for URL secured
      resource at Namespace of Spring Security add it to
      FilterSecurityInterceptor automatically added and by adding
      FilterSecurityInterceptor, add custom-filter, DB based secured
      resource-authorization mapping data based treatment is added in this
      example. It is recommended that it locates just next to basic
      FILTER_SECURITY_INTERCEPTOR, notice that because it operates only once
      when requesting for same filter type, assign observeOncePerRequest to
      false to release it. Bean that is registered as
      databaseObjectDefinitionSource extend
      DefaultFilterInvocationDefinitionSource of Spring Security so, it is
      provided DB data used securedObjectService thorugh FactoryBean extention
      class as defined requestMap and add a DB based initial data loading and
      run tile reload function. PatternMatcher examine Url pattern matching is
      an example for regular form based RegexUrlPathMatcher on above. Strong
      pattern matching examination is possible if using regular expression and
      basically, whole url includes URL parameter can be examined. Aside from
      it, AntUrlPathMatcher can be set and expression formula more simple than
      written regular expression. URL parameter is removed and pattern matching
      comparison is operated basically. </para>
    </sect2>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec006">
      <title>Applying Secured Resource(Url) - Role Mapping based on DB
      </title>

      <para>This is an example for applying Method Authorization using DB
      based Method/Pointcut secured resource data</para>

      <programlisting language="xml">
<![CDATA[    
<!-- customizing method security start -->
<b:bean id="methodMap" 
class="anyframe.iam.core.intercept.ResourcesMapFactoryBean" init-method="init">
    <b:property name="securedObjectService" ref="securedObjectService" />
    <b:property name="resourceType" value="method" />
</b:bean>

<b:bean id="methodDefinitionSources" 
class="org.springframework.security.intercept.method.MapBasedMethodDefinitionSource">
    <b:constructor-arg ref="methodMap" />
</b:bean>

<b:bean id="_delegatingMethodDefinitionSource" 
class="org.springframework.security.intercept.method.DelegatingMethodDefinitionSource">
    <b:property name="methodDefinitionSources">
        <b:list>
            <b:ref bean="methodDefinitionSources" />
            <b:bean 
				class="org.springframework.security.
				annotation.SecuredMethodDefinitionSource" />
            <b:bean 
				class="org.springframework.security.
				annotation.Jsr250MethodDefinitionSource" />
        </b:list>
    </b:property>
</b:bean>

<b:bean id="_methodDefinitionSourceAdvisor" 
class="org.springframework.security.intercept.method.
		aopalliance.MethodDefinitionSourceAdvisor">
    <b:constructor-arg value="_methodSecurityInterceptor" />
    <b:constructor-arg ref="_delegatingMethodDefinitionSource" />
</b:bean>

<b:bean id="_methodSecurityInterceptor" 
		class="org.springframework.security.intercept.method.
		aopalliance.MethodSecurityInterceptor">
    <b:property name="validateConfigAttributes" value="false" />
    <b:property name="authenticationManager" ref="authenticationManager" />
    <b:property name="accessDecisionManager" ref="accessDecisionManager" />
    <!--
    <b:property name="afterInvocationManager" ref="afterInvocationManager" />
    -->
    <b:property name="objectDefinitionSource" ref="_delegatingMethodDefinitionSource" />
</b:bean>

<b:bean id="pointcutMap" 
class="anyframe.iam.core.intercept.ResourcesMapFactoryBean" init-method="init">
    <b:property name="securedObjectService" ref="securedObjectService" />
    <b:property name="resourceType" value="pointcut" />
</b:bean>

<b:bean id="_protectPointcutPostProcessor" 
class="org.springframework.security.intercept.method.ProtectPointcutPostProcessor">
    <b:constructor-arg ref="methodDefinitionSources" />
    <b:property name="pointcutMap" ref="pointcutMap" />
</b:bean>

<!-- customizing method security end 
-->]]>
    </programlisting>

      <para>Defined as traditional Bean setting form by Substitution a
       <![CDATA[<global-method-security>]]> of Namespace and notice that
      methodDefinitionSource (ObjectDefinitionSource) reference setting of
      multi-step for supporting a jsr-250/secured annotation based method
      security as same. Bean that registers as a methodDefinitionSources uses
      a MapBasedMethodDefinitionSource of Spring Security as it is and secured
      resource(method)-authority mapping DB data that use
      securedObjectService through FactoryBean extended class defining a
      methodMap as construct parameter is provided as initial data. Likewise,
      through FactoryBean extended class that is defined as pointcutMap,
      secured resource(pontcut)-authorized mapping DB data that
      securedObjectService used and by reading based Pointcut expression
      formula of AspectJ, adding pointcut dynamically when creating each bean
      for providing adviser to secured process of method for target method of
      matched bean expression formula at ProtectPointcutPonstProcessor.
      </para>
    </sect2>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec007">
      <title>Resouce/Role restriction Management According to The Execution
      Time </title>

      <para>This is an example for applying access control function of
      restriction Role and restriction resource(Url) depend on execution time.
      </para>

      <programlisting language="xml">
<![CDATA[    
<b:bean id="restrictedTimesAccessDecisionManager" 
	class="org.springframework.security.vote.AffirmativeBased">
    <b:property name="allowIfAllAbstainDecisions" value="false" />
    <b:property name="decisionVoters">
        <b:list>
            <b:bean class=
            "org.springframework.security.vote.AnyframeRoleHierarchyRestrictedVoter">
                <b:property name="rolePrefix" value="" />
                <b:property name="roleHierarchy" ref="roleHierarchy" />
            </b:bean>
            <b:bean class="org.springframework.security.vote.AuthenticatedVoter" />
        </b:list>
    </b:property>
</b:bean>

<b:bean id="restrictedTimesFilterSecurityInterceptor"
    class="anyframe.iam.core.intercept.web.RestrictedTimesFilterSecurityInterceptor">
    <custom-filter before="FILTER_SECURITY_INTERCEPTOR"/>
    <b:property name="authenticationManager" 
   	 ref="authenticationManager" />
    <b:property name="accessDecisionManager" 
     ref="restrictedTimesAccessDecisionManager" />
    <b:property name="objectDefinitionSource" 
     ref="restrictedTimesObjectDefinitionSource" />
</b:bean>

<b:bean id="restrictedTimesObjectDefinitionSource"
    class="anyframe.iam.core.intercept.web.
    		ReloadableRestrictedTimesFilterInvocationDefinitionSource">
    <b:property name="urlMatcher" ref="regexUrlPathMatcher" />
    <b:property name="securedObjectService" ref="securedObjectService" />
</b:bean>
]]>
</programlisting>

      <para>RestrictedTimesFilterSecurityInterceptor provide access restricted
      function according to the execution time by extending a
      FilterSecurityInterceptor of Spring Security and
      ReloadableRestrictedTimesFilterInvocationDefinitionSource obtain
      restriction/permission Role by judging a matching from DB based
      execution time-Resource/Role restricted data, and also setting an
      AnyframeRoleHierarchyRestrictedVoter that extended implementation of
      AccessDecisionVoter for judging final ACCESS/DENY access restriction
      according to time restricted Resource/Role, it make apply freely. Three
      beans for setting of restricted time have to used as pair,
      RestrictedTimesFilterSecurityInterceptor as a custom-filter should place
      just in front of FILTER_SECURITY_INTERCEPTOR that is added automatically
      at Namespace. Data management section is provided at IAM Admin for
      execution time restriction type can assign a restricted type such as
      Crash,daily that are applied everyday and weekend, holiday, improve type
      user assign from start to finish. </para>
    </sect2>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec008">
      <title>Secured Resource(Url, Service Method) Registration Assist
      Function</title>

      <para>This is an example that it support an Assist(auto complete) based on service
      method information or UrlMpping that runs at real target application
      when register a secured recourse at IAM Admin.</para>

<!-- 
      <programlisting language="xml">
<![CDATA[    
<b:bean id="resourceCreationAssistService"
    class="anyframe.iam.core.assist.impl.ResourceCreationAssistServiceImpl">
    <b:property name="resourceAssistDAO" ref="resourceAssistDAO" />
</b:bean>

<b:bean id="resourceAssistDAO" 
    class="anyframe.iam.core.assist.impl.ResourceAssistDAO">
    <b:property name="dataSource" ref="dataSource" />
</b:bean>
]]>
</programlisting>
 -->

      <para>Collecting resource information of target application through
      resourceGatherAssistService and resourceCreationAssistService and can
      save a temporary table of DB. Those services are exposed as remote at
      IAM Admin so, target function will be executed at that time when
      called by Admin. </para>

      <programlisting language="xml">
<![CDATA[
<bean id="resourceGatherAssistService"
    class="anyframe.iam.core.assist.impl.ResourceGatherAssistServiceImpl" />
]]>
</programlisting>

      <para>resourceGatherAssistService collect some information like
      package/class/method and others of Bean that has postfix 'Service'(other
      postfix is assigned when assign a candidateBeanPostfix) as service for
      Assist of registration a secured resource of pointcut type and simple
      Assist,pointcut expression formula, is calculated based on it. To
      collect Url information, using a url that is registered in
      HandlerMapping beans of AbstractUrlHandlerMapping typed of SpringMVC so,
      above resourceGatherAssistService bean setting should be registered
      under the<emphasis role="bold"> xx-servlet.xml that is
      WebApplicationContext loaded through DispatcherServlet(same as
      connection setting file of IAM Adming Remote below). </emphasis></para>
    </sect2>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec009">
      <title>Reflection of Secured Resource Mapping Run Time(Url, Restricted
      Times)</title>

      <para>This is an example for reloadService setting that execute
      representatively a function of restoring a secured resource information
      at runtime.</para>

      <programlisting language="xml">
<![CDATA[
<b:bean id="resourceReloadService"
    class="anyframe.iam.core.reload.impl.ResourceReloadServiceImpl">
    <b:property name="databaseObjectDefinitionSource" 
    	ref="databaseObjectDefinitionSource" />
    <b:property name="restrictedTimesObjectDefinitionSource" 
    	ref="restrictedTimesObjectDefinitionSource" />
    <b:property name="restrictedTimesAccessDecisionManager" 
    	ref="restrictedTimesAccessDecisionManager" />
</b:bean>
]]>
</programlisting>

      <para>DB based secured resource(Url)-authority mapping
      information(requestMap) through reloadService and secured resource
      according to the time restriction can be restored at runtime, this
      service is exposed as remote at IAM Admin so, target function will be
      operated at that time when called at Admin. </para>
    </sect2>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec010">
      <title>IAM Admin Remote Linkage</title>

      <para>This is an example that it is set for treatment secured
      information Assist and run time restoration as Remote at IAM Admin.
      </para>

      <programlisting language="xml">
<![CDATA[
<!-- Remote HttpInvoker Call -->
<bean class="org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter" />

<bean id="resourceGatherAssistService"
    class="anyframe.iam.core.assist.impl.ResourceGatherAssistServiceImpl" />

<bean id="gatherService" 
    class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
    <property name="service" ref="resourceGatherAssistService" />
    <property name="serviceInterface"
        value="anyframe.iam.core.assist.IResourceGatherAssistService" />
</bean>

<bean id="creationService" 
    class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
    <property name="service" ref="resourceCreationAssistService" />
    <property name="serviceInterface"
        value="anyframe.iam.core.assist.IResourceCreationAssistService" />
</bean>

<bean id="reloadService" 
    class="org.springframework.remoting.httpinvoker.HttpInvokerServiceExporter">
    <property name="service" ref="resourceReloadService" />
    <property name="serviceInterface"
        value="anyframe.iam.core.reload.IResourceReloadService" />
</bean>

<bean id="urlMappingResourceAssist" 
    class="org.springframework.web.servlet.handler.SimpleUrlHandlerMapping">
    <property name="mappings">
        <props>
            <prop key="/assist/resourceGatherAssist.do">gatherService</prop>
            <prop key="/assist/resourceCreationAssist.do">creationService</prop>
            <prop key="/reload/resourceReload.do">reloadService</prop>
        </props>
    </property>
</bean>
    ]]></programlisting>

      <para>Because IAM Admin is also Spring based application, it is possible
      to link remote simply as Http based through DispatcherServlet of
      SpringMVC by Using HttpInvoker technology that is one of the ways to
      expose remote service by itself for Spring Bean. Above setting is
      separated as spring-security-servlet.xml and make it register on
      WebApplicationContext by DispatcherServlet.</para>

      <programlisting language="xml">
<![CDATA[
<intercept-url pattern="\A/assist/resourceGatherAssist\.do.*\Z" access="ROLE_ADMIN" />
<intercept-url pattern="\A/assist/resourceCreationAssist\.do.*\Z" access="ROLE_ADMIN" />
<intercept-url pattern="\A/reload/resourceReload\.do.*\Z" access="ROLE_ADMIN" />
    ]]></programlisting>

      <para>To make only administrator collect/register above runtime reload
      and assit information, assigning ROLE_ADMIN for target remote open url
      as intercept-url setting of http tag is needed. By considering this at
      IAM Admin, setting AuthenticationSimpleHttpInvokerRequestExecutor as
      httpInvokerRequestExecutor when setting HttpInvokerProxyFactoryBean for
      HttpInvoker client when HttpInvoker remote of logged user(admin)
      authorization information automatically to pass. See the
      remote-invoker-servlet.xml setting example of Admin environment setting
      for related example. </para>

      <para>When calling remote of HttpInvoker type, data is not sent by
      encrypted form but just Base64 encoding type so, it has problem for
      security. https channel security is need to apply to improve this and
      setting is the followings. </para>

      <programlisting language="xml">
<![CDATA[    
<intercept-url pattern="\A/reload/resourceReload\.do.*\Z" access="ROLE_ADMIN" 
	requires-channel="https" />
 		 ..
    ]]></programlisting>

      <para>Because applying process is beyond of this document for treatment
      SSL, X.509 certificate(or private certificate) for
      applying https protocol based channel security, they are omitted.
      </para>
    </sect2>

    <sect2 id="anyframeiamcore_extensionconfiguration_sec011">
      <title>Refection of ACL for User defined View Resource </title>

      <para>Providing a function for checking mapped permission for user
      defined View Resource(ex. Screen, program) </para>

      <programlisting language="xml">
<![CDATA[
<b:bean id="viewResourceAccessService"
    class="anyframe.iam.core.acl.impl.ViewResourceAccessServiceImpl">
    <b:property name="securedObjectService" ref="securedObjectService" />
    <b:property name="registeredPermissions">
        <b:list>
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.READ" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.WRITE" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.CREATE" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.DELETE" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.ADMINISTRATION" />                
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.LIST" />                
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.PRINT" />
            <!--
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.REPORT" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.POPUP" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.DOWNLOAD" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.UPLOAD" />
            <b:ref local="anyframe.iam.core.acl.ExtBasePermission.HELP" />
            -->
        </b:list>
    </b:property>
</b:bean>

<!-- Permission definition that Application use currently -->
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.READ"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.READ" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.WRITE"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.WRITE" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.CREATE"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.CREATE" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.DELETE"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.DELETE" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.ADMINISTRATION"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.ADMINISTRATION" />
</b:bean>

<b:bean id="anyframe.iam.core.acl.ExtBasePermission.LIST"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.LIST" />
</b:bean>

<b:bean id="anyframe.iam.core.acl.ExtBasePermission.PRINT"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.PRINT" />
</b:bean>
<!--
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.REPORT"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.REPORT" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.POPUP"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.POPUP" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.DOWNLOAD"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.DOWNLOAD" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.UPLOAD"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.UPLOAD" />
</b:bean>
<b:bean id="anyframe.iam.core.acl.ExtBasePermission.HELP"
    class="org.springframework.beans.factory.config.FieldRetrievingFactoryBean">
    <b:property name="staticField"
        value="anyframe.iam.core.acl.ExtBasePermission.HELP" />
</b:bean>
-->
]]></programlisting>

      <para>Anyframe IAM provides BitMask expression like Spring
      Security through ExtBasePermission adding often used some Permission
      attribute by extending a BasePermission of Spring Security. READ, WRITE,
      CREATE, DELETE, ADMINISTRATION are Permission provided by Spring
      Security basically and above example is used by adding LIST, PRINT at
      target application. As confirmed above, user can define permission type 
      that want to be apply at current application. ExtBasePermission has reserved Permission attribute
      additionally from FNC0 to FNC9 but it not mentioned above example, it can
      be used by implying properly when needed more permission item at
      Application. Note that above viewResourceAccessService related setting
      should be same as context-security.xml of IAM Admin for treatment
      Permission item dynamically could be different depend on target
      application at current IAM Admin.</para>

      <para>It provides function that can be checking logined user(considered
      priority of user > group > ROLE) has specific Permission for
      specific viewReousrceId and viewResourceTag, JSP custom tag, can treat a
      removing section in the screen depend on Permission by using this
      easily. See the AccessControl chapter for related using example. And also
      user defined ViewResource and Permission mapping data management section
      as Resource Management - View List / View Mapping items at IAM Admin are
      provided, so you can see it. </para>
    </sect2>
  </section>
</chapter>
