<chapter id="anyframeiamcore_overview">
	<title>Anyframe IAM Core</title>

	<para>Anyframe
		IAM(Identity &amp; Access Management) Core는 Spring Security
		Framework을
		기반으로 인증 및 권한관리 기능을 제공한다. 현재 Anyframe IAM 에 적용된
		<emphasis role="bold">Spring
			Security Framework의 버전은 2.0.4</emphasis>
		이다.
	</para>
	<para>
		IAM Core 는 Java EE 기반의 엔터프라이즈 어플리케이션을 위한 통합 보안 서비스(인증 및 권한관리)를 제공한다.
		또한 Java EE
		기반의 엔터프라이즈 어플리케이션 개발을 위하여 가장 널리 사용되는 Spring Framework 이나
		Anyframe 기반의
		프로젝트를 지원한다. 일반적으로 어플리케이션에 보안 기능을 추가하여야 하는 경우 어플리케이션 환경을
		재구성하기 위한 일련의
		제반 작업들이 수반되는데, 이는 개발 생산성 측면에서의 부담을 야기한다. 그러나 IAM Core 를
		사용하면 이러한 최소화된
		형태의 설정 작업을 통해 유연하고 강력한 보안 기능들을 사용할 수 있다. </para>

	<section id="anyframeiam_sharedcomponents">
		<title>공유 컴포넌트(Shared Components)</title>
		<para>
			IAM Core 에서 핵심적인 컴포넌트들을 공유 컴포넌트(Shared Components) 라고 하며, IAM
			Core 는 이러한
			컴포넌트들이 없이는 동작할 수 없다. 공유 컴포넌트들은 기타 다른 컴포넌트들과의 결합을 통해 전체 구조를
			표현할 수 있다.
			그중에서도 가장 중요한 객체는 SecurityContextHolder 이다. 기본적으로
			SecurityContextHolder 는 ThreadLocal 을 이용하여 어플리케이션의 보안 컨텍스트의 세부사항 및 인증
			주체에 대한 세부 사항을 보관한다. 
		</para>
		<itemizedlist>
			<para>Spring Security 의 주요 공유 컴포넌트 </para>
			<listitem>
				<para>SecurityContextHolder : SecurityContext 에 대한 모든 유형의 access 를
					제공한다.
				</para>
			</listitem>

			<listitem>
				<para>SecurityContext : Authentication 객체를 담고 있으며, 또한 request 에 특정한
					보안정보를 유지할 수도 있다.
				</para>
			</listitem>

			<listitem>
				<para>HttpSessionContextIntegrationFilter : 웹 요청 간의 SecurityContext
					를 HttpSession 에 저장한다. </para>
			</listitem>

			<listitem>
				<para>Authentication : Spring Security 에 특정한 방법으로 인증주체를 표현한다.</para>
			</listitem>

			<listitem>
				<para>GrantedAuthority : 인증주체에 대한 어플리케이션 범위의 권한을 나타낸다. </para>
			</listitem>

			<listitem>
				<para>UserDetails : 어플리케이션의 DAO 를 사용하여 Authentication 객체를 작성할 수 있도록
					필요한 정보를 제공한다.</para>
			</listitem>

			<listitem>
				<para>UserDetailsService : String 기반의 username(또는 인증 ID, 보통 우리는
					userId 로 사용함)이 전달되었을 때 UserDetails 를 생성한다.  </para>
			</listitem>
		</itemizedlist>
	</section>

	<section id="anyframeiam_webappauthentication">
		<title>웹 어플리케이션의 인증 및 권한 처리 절차</title>
		<para>일반적인 웹 어플리케이션의 인증 및 권한 처리 절차는 다음과 같다. </para>
		<mediaobject>
			<imageobject>
				<imagedata scalefit="1" width="100%" contentdepth="100%"
					align="center" fileref="../image/anyframeiam/webapp_authentication.png" />
			</imageobject>
		</mediaobject>
		<itemizedlist>
			<listitem>
				<para>1. 자원(img/html 등의 static 웹 리소스 또는 .do/jsp 등의 dynamic 웹 리소스) 요청
				</para>
			</listitem>

			<listitem>
				<para>2. 보호된 자원(secured resources)인지 판단
				</para>
			</listitem>

			<listitem>
				<para>3. 인증된 사용자인지 판단 -> 인증된 경우 다음 단계 진행 / 인증 정보가 없는 경우 인증을 위한 처리로
					분기
				 </para>
			</listitem>

			<listitem>
				<para>4. 아직 인증이 되지 않은 경우 로그인 페이지로 이동 (기존 요청 url 은 인증 성공 후 진행할 수 있도록
					보관)
				 </para>
			</listitem>

			<listitem>
				<para>5. 인증 메커니즘에 따라 사용자 로그인 (일반적으로 id/password 를 HTML Form 을 통해
					post 방식으로 submit) 
				</para>
			</listitem>

			<listitem>
				<para>6. 신원 정보(credential)가 유효한지 판단 -> 유효 시 다음 단계 진행 / 유효치 않을 시 에러
					페이지 이동 또는 신원 정보 재요청(로그인 실패 정보 설정하여 로그인 페이지로 되돌아감)
				</para>
			</listitem>

			<listitem>
				<para>7. 해당 보호 자원에 대한 접근 권한이 있는지 판단 -> 있으면 보호 자원 제공 / 접근 권한 없을 시
					Access Denied 에러 페이지로 이동
				</para>
			</listitem>
		</itemizedlist>

		<sect2 id="anyframeiamcore_overview_sec001">
			<title>Filter Chain</title>
			<para>Spring Security 는 Servlet Filter 기술을 사용하여 웹 리소스에 대한 보안 제어를 제공하며
				여러 Filter 를 Filter Chain 으로 엮어 필요에 따른 각 보안 기능을 적용하게 된다.
				Spring Security 에서 사용하는 Filter 들은 Spring 컨테이너가 관리하는 Bean 이기도 하며 사용자 인증,
				보호자원 권한 제어 등 주요 보안 기능에 필요한 세부 보안 기능을 매우 유연하게 추상화하여
				Spring 에서 관리하는 별도의 Dependency Bean 형태로 사용하게 된다.
				아래에 나타난 Filter (AuthenticationProcessingFilter,
				HttpSessionContextIntegrationFilter, ExceptionTranslationFilter,
				FilterSecurityInterceptor) 들은
				Spring Security 에서 필수적으로 사용되고 있으며 필요에 따라 Spring Security 에서 기본으로 구현하여 제공하는
				다양한 Filter 들을 추가/변경 할 수 있다.
				Anyframe IAM 의 경우 FilterSecurityInterceptor 를 확장한 시간 제한에 따른 권한 제어용 Filter 등을
				추가로 삽입하여 처리 가능하다.
			</para>

			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%"
						align="center" fileref="../image/anyframeiam/filter-chain.gif" />
				</imageobject>
			</mediaobject>
		</sect2>

		<sect2 id="anyframeiamcore_overview_sec002">
			<title>보안 객체(Secure Object)의 저장 구조</title>
			<para>Spring Security 에서는 사용자 인증에 따른 보안 정보를 제공하는 보안 객체를 기본으로 현재 실행중인	
				Thread 에 유지할 수 있도록 제공하고 있다.
				Spring Security 의 기본 구현에 따르면
				SecurityContext 를 SecurityContextHolder 내부에 생성된 ThreadLocal 객체를 이용하여
				저장하게 되며 HttpSessionContextIntegrationFilter 를 사용하여
				request 간 SecurityContext 정보를 Http Session 에 동기화하여 유지하게 된다.
			</para>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%"
						align="center" fileref="../image/anyframeiam/security_context.jpg" />
				</imageobject>
			</mediaobject>
			<itemizedlist>
				<listitem>
					<para>Spring Security에서 생성한 정보 - SecurityContextHoler 이용하여
						SecurityContext 얻음</para>
				</listitem>

				<listitem>
					<para>응용프로그램이 분산되어 있는 경우 등 다양한 환경에서 사용 가능토록 SecurityContext를
						SecurityContextHolder 내부에 생성한 ThreadLocal 객체를 이용하여 저장하고 있음.</para>
				</listitem>

				<listitem>
					<para>ThreadLocal 객체는 현 쓰레드에서만 필요한 상태 정보를 담을 수 있음.</para>
				</listitem>

				<listitem>
					<para>웹 환경에서 사용자 요청시 마다 동일한 역할을 하는 SecurityContext를 다시 생성하는 것은 맞지
						않음 → HttpSessionContextIntegrationFilter 를 사용하여 SecurityContext
						정보를 ThreadLocal에 기록하고 가져오는 작업을 수행함. (Session 에 저장)</para>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 id="anyframeiamcore_overview_sec003">
			<title>주요 보안 객체 모델</title>
			<para>아래는 Spring Security 에서 보호된 자원에 대한 권한 맵핑을 검사하여 접근을 허용할지 결정하는 권한
				처리에 관계된 주요 모듈의 관계를 나타낸다. 
			</para>
			<mediaobject>
				<imageobject>
					<imagedata scalefit="1" width="100%" contentdepth="100%"
						align="center" fileref="../image/anyframeiam/security-interception.gif" />
				</imageobject>
			</mediaobject>
			<itemizedlist>
				<listitem>
					<para>Web Url 에 대한 보호자원 보안 제어를 처리하는 FilterSecurityInterceptor 는
						AbstractSecurityInterceptor 를 상속받고 있으며 ObjectDefinitionSource 를
						통하여 보호자원-권한맵핑 데이터를 검사하여
						매칭된 패턴에 해당하는 권한이 실제로 로그인한 사용자가 가지고 있는지를 AccessDecisionManager 에 등록된
						AccessDecisionVoter 들의 ACCESS/DENIED 조합의 결과로 처리하게 된다. parent 인
						AbstractSecurityInterceptor 에서는
						필요에 따라 AuthenticationManager 를 통한 인증 및 RunAsManager 에 의한 사용자 대리 처리
						Spring 의 ApplicationEvent 를 상속받은 여러 보안 관련 이벤트 처리를 수행하게 된다.</para>
				</listitem>

				<listitem>
					<para>위의 구조를 통해 보호자원 및 권한 맵핑, 권한 검사 등의 보안 모듈은 매우 유연하게 추상화되어 있음을 알 수
						있으며, 메서드에 대한 AOP 형식의 보안 제어를 사용하는 MethodSecurityInterceptor
						등도 마찬가지로 AbstractSecurityInterceptor 를 상속받고 있으며 동일하게 여러 Interface 에
						대한 메서드 유형 보안 처리를 위한 구현 모듈을 사용하게 된다.
					   </para>
				</listitem>
			</itemizedlist>
		</sect2>

		<sect2 id="anyframeiamcore_overview_sec004">
			<title>Web Authorization</title>
			<para>위의
				Filter Chain 과 보안 객체 모델에서 확인할 수 있는 FilterSecurityInterceptor 가 Web
				URL 권한 처리를 담당하며 Spring Security 2.0 이후의 Namespace 태그를 사용하여 설정하는 경우
				http 태그 하위에 <![CDATA[ <intercept-url pattern="antpath/regex 표현식 url 패턴" access="접근 가능한 Role" />]]>
				형태로 보호하고자 하는 웹 Url 자원에 대해 맵핑 권한을 지정하게 된다.
			</para>
			<para>intercept-url 로 지정하는 url 패턴의 순서는 매우 중요하며 Spring Security 에서는
				나타나는 순서에 따라(Top to Bottom) 제일 먼저 match 된 패턴에 맵핑된 권한만 검사하게 된다.
				그러므로 일반적으로 상세 패턴을 상위로, 와일드카드를 사용한 그룹 패턴은 하위로 작성하여야 하며 자주 억세스 하는 페이지에 대한
				맵핑은 상위로 지정하는 것이 성능상 유리하다.
			</para>
			<para>Anyframe IAM 에서는 위 보호자원(Url)-Role 권한 맵핑 부분을 DB화 하여 동일하게 DB 기반의
				권한 처리를 하는 FilterSecurityInterceptor 를 하나 더 추가하여 custom-filter 로 배치하여
				함께 사용하게 된다.
			</para>
		</sect2>

		<sect2 id="anyframeiamcore_overview_sec005">
			<title>Method Authorization</title>
			<para>메서드 보안 제어는 HttpServletRequest 기반의 Web 환경이 아닌 경우에도 적용이 가능하며 더욱
				견고하고 재사용성이 뛰어나며 강력한 권한 처리를 제공한다. 
			</para>
			<para>Spring Core 프레임워크에서와 마찬가지로 Spring AOP, AspectJ 와 같은 다양한 AOP 기술을
				지원하며 Spring Security 의 메서드 권한 처리는 Around Advice 로 동작하게 된다.
				따라서 메서드 실행
				전/후에 보안 로직을 적용할 수 있으며 결과값을 가공(ex. Domain 객체에 대한 ACL 을 고려한 결과 데이터
				Filtering)할 수도 있다.
			</para>
			<para>Method metadata 지원</para>
			<itemizedlist>
				<listitem>
					<para><![CDATA[@JSR250 – ex.) @RolesAllowed("ROLE_USER")]]></para>
				</listitem>
				<listitem>
					<para><![CDATA[@Secured – ex.) @Secured("ROLE_USER")]]></para>
				</listitem>
				<listitem>
					<para>
					<![CDATA[Instance-based XML -
								<bean id="categoryService" class="com.sds.emp.sale.services.impl.CategoryServiceImpl">
							         <security:intercept-methods>
		           						<security:protect method="com.sds.emp.sale.services.CategoryService.add*" access="ROLE_ADMIN"/>
		           					 </security:intercept-methods>
		           					..]]>
					</para>
				</listitem>
				<listitem>
					<para><![CDATA[AspectJ pointcut – ex.) <protect-pointcut expression="execution(* *.get*(..))" access="ROLE_USER" />]]></para>
				</listitem>
			</itemizedlist>
			<para>Anyframe IAM 에서는 위 보호자원(Method)-Role, 보호자원(Pointcut)-Role 권한 맵핑
				부분을 DB화 하여 처리 가능하다.
			</para>
			<para>또한 Spring Security 3.0 이상에서는 EL(Expression Language)-
				@PreAuthorize, @PostAuthorize, @PreFilter, @PostFilter 을 사용한 보다 강력한
				보안 기능을 제공하게 될 것이다. 
			</para>
		</sect2>

		<sect2 id="anyframeiamcore_overview_sec006">
			<title>Domain Object ACL</title>
			<para>Spring Security 의 ACL 관련 주요 기능</para>
			<itemizedlist>
				<listitem>
					<para>모든 domain 객체에 대한 ACL entry 들을 조회/관리하는 방법 제공</para>
				</listitem>
				<listitem>
					<para>Method 수행 전에 해당 domain 객체에 대에 주어진 principal (현재 사용자, 권한) 이
						허가되었는지 보증하는 방법 제공</para>
				</listitem>
				<listitem>
					<para>Method 수행 후에 해당 domain 객체에 대해 주어진 principal 에 허가된 경우만 처리토록
						보증하는 방법(Filtering) 제공</para>
				</listitem>
			</itemizedlist>
			<para>Spring Security Domain Object ACL 의 주요 고려사항</para>
			<itemizedlist>
				<listitem>
					<para>성능, ACL database 의 정규화 수준</para>
				</listitem>
				<listitem>
					<para>필터링 수행을 위한 적절한 Tier</para>
				</listitem>
				<listitem>
					<para>Java 로부터 DB로 User identity 의 적절한 전달</para>
				</listitem>
			</itemizedlist>
			<para>Permission 에 대한 Bit-mask 표현 사용</para>
			<itemizedlist>
				<listitem>
					<para>0..001 = READ = 1, 0..011 = READ,WRITE = 3</para>
				</listitem>
			</itemizedlist>
			<para>Spring Security Domain Object ACL 의 제약사항</para>
			<itemizedlist>
				<listitem>
					<para>ACL 적용을 위한 Domain 객체는 long 타입(또는 long 호환 타입) 의 ID 를 가져야 함
					</para>
				</listitem>
			</itemizedlist>
		</sect2>
	</section>

	<section id="anyframeiam_core_feature">
		<title>Anyframe IAM Core 의 특징</title>
		<itemizedlist>
			<listitem>
				<para>타겟 어플리케이션에 설치되어 인증 및 권한 처리 제어</para>
			</listitem>
			<listitem>
				<para>DB 기반의 보호자원, 권한 맵핑 처리 제공</para>
			</listitem>
			<listitem>
				<para>런타임 보호자원-권한 맵핑 (Web Url, Restricted Times Roles/Resources)
					reload 기능 제공</para>
			</listitem>
			<listitem>
				<para>사용자 정의 viewResource 에 대한 Permission 체크 기능 제공</para>
			</listitem>
			<listitem>
				<para>Anyframe IAM 의 DB Schema 를 사용할 수 없거나 JDK 1.4 환경인 경우 IAM Core
					단독으로 적용 가능
					cf.) 데이터 관리는 업무 프로젝트에서 대응해야 함 </para>
			</listitem>
		</itemizedlist>
	</section>

</chapter>
